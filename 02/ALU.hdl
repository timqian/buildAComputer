// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // If zx then x=0
   Mux16(a = x, b = false, sel = zx, out = xval1);               // true 和 false 也可作为总线
   // if nx then x = !x;                                  better if using DMux16
   Not16(in = xval1, out = xval2);
   Mux16(a = xval1, b = xval2, sel = nx, out = xval);

   // if zy then y=0
   Mux16(a=y, b=false, sel=zy, out=yval1);
   // if ny then y=!y
   Not16(in = yval1, out = yval2);
   Mux16(a = yval1, b = yval2, sel = ny, out = yval);

   // if f then out = x+y else out = x & y
   Add16(a = xval, b = yval, out = addVal);
   And16(a = xval, b = yval, out = andVal);
   Mux16(a = andVal, b = addVal, sel = f, out = val1);

   // if no then out = ! out
   Not16(in = val1, out = nVal1);
   Mux16(a = val1, b = nVal1, sel = no, out = out, out[0..7] = partA, out[8..15] = partB, out[15] = ng); // 输出可以连多个！！

   // zr
   Or8Way(in = partA, out = zr1);
   Or8Way(in = partB, out = zr2);
   Or(a = zr1, b = zr2, out = notZr);
   Not(in = notZr, out = zr);

}
